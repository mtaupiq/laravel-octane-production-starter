# ---------- Builder w/ Composer ----------
FROM composer:2 AS vendor
WORKDIR /app
COPY composer.json composer.lock* ./
RUN composer install --no-dev --prefer-dist --no-interaction --no-progress
COPY . .
RUN composer install --no-dev --prefer-dist --no-interaction --no-progress

# ---------- Asset Builder ----------
FROM node:20-alpine AS asset-builder
WORKDIR /app
COPY package.json package-lock.json* pnpm-lock.yaml* yarn.lock* ./
RUN if [ -f package-lock.json ]; then npm ci --no-audit --no-fund;     elif [ -f yarn.lock ]; then yarn install --frozen-lockfile;     elif [ -f pnpm-lock.yaml ]; then npm i -g pnpm && pnpm i --frozen-lockfile;     else npm install --no-audit --no-fund; fi
COPY . .
RUN if [ -f package.json ]; then       if grep -q '"build"' package.json; then npm run build; else echo "no build script"; fi; fi

# ---------- PHP-FPM Runtime ----------
FROM php:8.3-fpm-alpine AS runtime
RUN apk add --no-cache tzdata icu-dev oniguruma-dev libzip-dev libpng-dev libjpeg-turbo-dev libwebp-dev freetype-dev     && docker-php-ext-configure gd --with-jpeg --with-webp --with-freetype     && docker-php-ext-install pdo_mysql mbstring zip gd intl opcache
WORKDIR /var/www/html
# Copy app code
COPY --from=vendor /app .
# Copy built assets
COPY --from=asset-builder /app/public/build ./public/build 2>/dev/null || true
# Optimize
RUN php artisan storage:link || true  && php artisan config:cache  && php artisan route:cache  && php artisan view:cache

# ---------- Nginx ----------
FROM nginx:1.27-alpine AS web
COPY docker/nginx.prod.conf /etc/nginx/conf.d/default.conf
WORKDIR /var/www/html
COPY --from=runtime /var/www/html /var/www/html
