# ===========================================
# Dockerfile.franken â€” Laravel Octane on FrankenPHP
# Multi-stage: base, dev, asset-builder, prod
# ===========================================

# -------- Base (FrankenPHP + PHP 8.3, Alpine) --------
FROM ghcr.io/dunglas/frankenphp:1.3-php8.3-alpine AS base

# System deps & PHP extensions
RUN apk add --no-cache \
      git unzip icu-dev libzip-dev libjpeg-turbo-dev libpng-dev libwebp-dev freetype-dev oniguruma-dev \
  && docker-php-ext-configure gd --with-jpeg --with-webp --with-freetype \
  && docker-php-ext-install -j"$(nproc)" pdo pdo_mysql mbstring zip gd intl opcache pcntl \
  && rm -rf /var/cache/apk/*

# Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /var/www/html

# Opcache tuning (safe defaults; override as needed)
RUN { \
      echo "opcache.enable=1"; \
      echo "opcache.enable_cli=1"; \
      echo "opcache.memory_consumption=256"; \
      echo "opcache.max_accelerated_files=20000"; \
      echo "opcache.validate_timestamps=0"; \
    } > /usr/local/etc/php/conf.d/opcache.ini

# -------- Dev stage --------
FROM base AS dev
# Node is useful for Vite and Octane --watch (needs chokidar in project)
RUN apk add --no-cache nodejs npm

# In dev we typically mount ./docker/dev-start-franken.sh into /usr/local/bin/dev-start-franken.sh via compose.
# Fallback: if the script is not present, run Octane directly.
CMD ["bash","-lc","test -x /usr/local/bin/dev-start-franken.sh && /usr/local/bin/dev-start-franken.sh || php artisan octane:start --server=frankenphp --host=0.0.0.0 --port=8000 --watch"]

# -------- Asset builder (optional) --------
FROM node:20-alpine AS asset-builder
WORKDIR /app
# Install dependencies if a lockfile or package.json exists
COPY package.json package-lock.json* pnpm-lock.yaml* yarn.lock* ./ 2>/dev/null || true
RUN if [ -f package-lock.json ]; then npm ci --no-audit --no-fund; \
    elif [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
    elif [ -f pnpm-lock.yaml ]; then npm i -g pnpm && pnpm i --frozen-lockfile; \
    elif [ -f package.json ]; then npm install --no-audit --no-fund; \
    else echo "No package.json found; skipping JS deps"; fi
COPY . .
RUN if [ -f package.json ]; then npm run build || echo \"No build script or build failed (skipping)\"; else echo \"No package.json; skipping build\"; fi

# -------- Prod runtime --------
FROM base AS prod
ENV APP_ENV=production \
    APP_DEBUG=false \
    LOG_CHANNEL=stderr

# Non-root user
ARG WWWUSER=1000
ARG WWWGROUP=1000
RUN addgroup -g "${WWWGROUP}" laravel && adduser -D -G laravel -u "${WWWUSER}" laravel
USER laravel

WORKDIR /var/www/html

# Copy app source (context = project root containing ./app if you build from there)
# In a typical layout, you build from repo root and COPY . .; adjust if needed.
COPY --chown=laravel:laravel . .

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-interaction

# Copy built frontend assets from the builder (if any)
COPY --from=asset-builder /app/public/build ./public/build 2>/dev/null || true

# Precompile caches that are safe at build-time (route/view). Config cache is done at start to pick up runtime env.
RUN php artisan route:cache || true && php artisan view:cache || true

EXPOSE 8000

# At container start: clear+rebuild config cache with current ENV, then run Octane on FrankenPHP
CMD ["bash","-lc","php artisan config:clear && php artisan config:cache && php artisan octane:start --server=frankenphp --host=0.0.0.0 --port=8000 --workers=4 --max-requests=500"]
